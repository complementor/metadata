package org.semanticweb.owlapi6.oboformattest.parser;

import static org.junit.Assert.assertEquals;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_ALT_ID;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_AUTO_GENERATED_BY;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_BROAD;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_BUILTIN;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_COMMENT;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_CONSIDER;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_CREATED_BY;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_CREATION_DATE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_DATA_VERSION;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_DATE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_DEF;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_DEFAULT_NAMESPACE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_DISJOINT_FROM;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_DISJOINT_OVER;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_DOMAIN;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_EQUIVALENT_TO;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_EQUIVALENT_TO_CHAIN;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_EXACT;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_EXPAND_ASSERTION_TO;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_EXPAND_EXPRESSION_TO;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_FORMAT_VERSION;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_HAS_SYNONYM_TYPE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_HOLDS_OVER_CHAIN;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_ID;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IDSPACE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IMPORT;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_INTERSECTION_OF;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_INVERSE_OF;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_A;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_ANONYMOUS;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_ANTI_SYMMETRIC;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_ASYMMETRIC;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_CLASS_LEVEL_TAG;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_CYCLIC;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_FUNCTIONAL;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_INVERSE_FUNCTIONAL;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_METADATA_TAG;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_OBSOLETE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_REFLEXIVE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_SYMMETRIC;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_IS_TRANSITIVE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_LOGICAL_DEFINITION_VIEW_RELATION;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_NAME;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_NAMESPACE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_NAMESPACE_ID_RULE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_NARROW;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_ONTOLOGY;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_OWL_AXIOMS;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_PROPERTY_VALUE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_RANGE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_RELATED;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_RELATIONSHIP;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_REMARK;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_REPLACED_BY;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_SAVED_BY;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_SCOPE;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_SUBSET;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_SUBSETDEF;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_SYNONYM;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_SYNONYMTYPEDEF;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_TRANSITIVE_OVER;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_EQUIVALENT;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_GENUS_DIFFERENTIA;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_HAS_SUBCLASS;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_IS_A;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_RELATIONSHIP;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_REVERSE_GENUS_DIFFERENTIA;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_UNION_OF;
import static org.semanticweb.owlapi6.vocab.OBOFormatConstants.OboFormatTag.TAG_XREF;

import org.junit.Test;

public class OBOFormatConstantsTestCase {
    @Test
    public void should() {
        assertEquals(0, TAG_FORMAT_VERSION.headerPriority());
        assertEquals(85, TAG_ONTOLOGY.headerPriority());
        assertEquals(10, TAG_DATA_VERSION.headerPriority());
        assertEquals(15, TAG_DATE.headerPriority());
        assertEquals(20, TAG_SAVED_BY.headerPriority());
        assertEquals(25, TAG_AUTO_GENERATED_BY.headerPriority());
        assertEquals(80, TAG_IMPORT.headerPriority());
        assertEquals(35, TAG_SUBSETDEF.headerPriority());
        assertEquals(40, TAG_SYNONYMTYPEDEF.headerPriority());
        assertEquals(45, TAG_DEFAULT_NAMESPACE.headerPriority());
        assertEquals(50, TAG_IDSPACE.headerPriority());
        assertEquals(55, TAG_TREAT_XREFS_AS_EQUIVALENT.headerPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_REVERSE_GENUS_DIFFERENTIA.headerPriority());
        assertEquals(60, TAG_TREAT_XREFS_AS_GENUS_DIFFERENTIA.headerPriority());
        assertEquals(65, TAG_TREAT_XREFS_AS_RELATIONSHIP.headerPriority());
        assertEquals(70, TAG_TREAT_XREFS_AS_IS_A.headerPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_HAS_SUBCLASS.headerPriority());
        assertEquals(110, TAG_OWL_AXIOMS.headerPriority());
        assertEquals(75, TAG_REMARK.headerPriority());
        assertEquals(10000, TAG_ID.headerPriority());
        assertEquals(10000, TAG_NAME.headerPriority());
        assertEquals(10000, TAG_NAMESPACE.headerPriority());
        assertEquals(10000, TAG_ALT_ID.headerPriority());
        assertEquals(10000, TAG_DEF.headerPriority());
        assertEquals(10000, TAG_COMMENT.headerPriority());
        assertEquals(10000, TAG_SUBSET.headerPriority());
        assertEquals(10000, TAG_SYNONYM.headerPriority());
        assertEquals(10000, TAG_XREF.headerPriority());
        assertEquals(10000, TAG_BUILTIN.headerPriority());
        assertEquals(100, TAG_PROPERTY_VALUE.headerPriority());
        assertEquals(10000, TAG_IS_A.headerPriority());
        assertEquals(10000, TAG_INTERSECTION_OF.headerPriority());
        assertEquals(10000, TAG_UNION_OF.headerPriority());
        assertEquals(10000, TAG_EQUIVALENT_TO.headerPriority());
        assertEquals(10000, TAG_DISJOINT_FROM.headerPriority());
        assertEquals(10000, TAG_RELATIONSHIP.headerPriority());
        assertEquals(10000, TAG_CREATED_BY.headerPriority());
        assertEquals(10000, TAG_CREATION_DATE.headerPriority());
        assertEquals(10000, TAG_IS_OBSOLETE.headerPriority());
        assertEquals(10000, TAG_REPLACED_BY.headerPriority());
        assertEquals(10000, TAG_IS_ANONYMOUS.headerPriority());
        assertEquals(10000, TAG_DOMAIN.headerPriority());
        assertEquals(10000, TAG_RANGE.headerPriority());
        assertEquals(10000, TAG_IS_ANTI_SYMMETRIC.headerPriority());
        assertEquals(10000, TAG_IS_CYCLIC.headerPriority());
        assertEquals(10000, TAG_IS_REFLEXIVE.headerPriority());
        assertEquals(10000, TAG_IS_SYMMETRIC.headerPriority());
        assertEquals(10000, TAG_IS_TRANSITIVE.headerPriority());
        assertEquals(10000, TAG_IS_FUNCTIONAL.headerPriority());
        assertEquals(10000, TAG_IS_INVERSE_FUNCTIONAL.headerPriority());
        assertEquals(10000, TAG_TRANSITIVE_OVER.headerPriority());
        assertEquals(10000, TAG_HOLDS_OVER_CHAIN.headerPriority());
        assertEquals(10000, TAG_EQUIVALENT_TO_CHAIN.headerPriority());
        assertEquals(10000, TAG_DISJOINT_OVER.headerPriority());
        assertEquals(10000, TAG_EXPAND_ASSERTION_TO.headerPriority());
        assertEquals(10000, TAG_EXPAND_EXPRESSION_TO.headerPriority());
        assertEquals(10000, TAG_IS_CLASS_LEVEL_TAG.headerPriority());
        assertEquals(10000, TAG_IS_METADATA_TAG.headerPriority());
        assertEquals(10000, TAG_CONSIDER.headerPriority());
        assertEquals(10000, TAG_INVERSE_OF.headerPriority());
        assertEquals(10000, TAG_IS_ASYMMETRIC.headerPriority());
        assertEquals(46, TAG_NAMESPACE_ID_RULE.headerPriority());
        assertEquals(10000, TAG_LOGICAL_DEFINITION_VIEW_RELATION.headerPriority());
        assertEquals(10000, TAG_SCOPE.headerPriority());
        assertEquals(10000, TAG_HAS_SYNONYM_TYPE.headerPriority());
        assertEquals(10000, TAG_BROAD.headerPriority());
        assertEquals(10000, TAG_NARROW.headerPriority());
        assertEquals(10000, TAG_EXACT.headerPriority());
        assertEquals(10000, TAG_RELATED.headerPriority());
        assertEquals(10000, TAG_FORMAT_VERSION.tagPriority());
        assertEquals(10000, TAG_ONTOLOGY.tagPriority());
        assertEquals(10000, TAG_DATA_VERSION.tagPriority());
        assertEquals(10000, TAG_DATE.tagPriority());
        assertEquals(10000, TAG_SAVED_BY.tagPriority());
        assertEquals(10000, TAG_AUTO_GENERATED_BY.tagPriority());
        assertEquals(10000, TAG_IMPORT.tagPriority());
        assertEquals(10000, TAG_SUBSETDEF.tagPriority());
        assertEquals(10000, TAG_SYNONYMTYPEDEF.tagPriority());
        assertEquals(10000, TAG_DEFAULT_NAMESPACE.tagPriority());
        assertEquals(10000, TAG_IDSPACE.tagPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_EQUIVALENT.tagPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_REVERSE_GENUS_DIFFERENTIA.tagPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_GENUS_DIFFERENTIA.tagPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_RELATIONSHIP.tagPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_IS_A.tagPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_HAS_SUBCLASS.tagPriority());
        assertEquals(10000, TAG_OWL_AXIOMS.tagPriority());
        assertEquals(10000, TAG_REMARK.tagPriority());
        assertEquals(5, TAG_ID.tagPriority());
        assertEquals(15, TAG_NAME.tagPriority());
        assertEquals(20, TAG_NAMESPACE.tagPriority());
        assertEquals(25, TAG_ALT_ID.tagPriority());
        assertEquals(30, TAG_DEF.tagPriority());
        assertEquals(35, TAG_COMMENT.tagPriority());
        assertEquals(40, TAG_SUBSET.tagPriority());
        assertEquals(45, TAG_SYNONYM.tagPriority());
        assertEquals(50, TAG_XREF.tagPriority());
        assertEquals(55, TAG_BUILTIN.tagPriority());
        assertEquals(98, TAG_PROPERTY_VALUE.tagPriority());
        assertEquals(65, TAG_IS_A.tagPriority());
        assertEquals(70, TAG_INTERSECTION_OF.tagPriority());
        assertEquals(80, TAG_UNION_OF.tagPriority());
        assertEquals(85, TAG_EQUIVALENT_TO.tagPriority());
        assertEquals(90, TAG_DISJOINT_FROM.tagPriority());
        assertEquals(95, TAG_RELATIONSHIP.tagPriority());
        assertEquals(130, TAG_CREATED_BY.tagPriority());
        assertEquals(140, TAG_CREATION_DATE.tagPriority());
        assertEquals(110, TAG_IS_OBSOLETE.tagPriority());
        assertEquals(115, TAG_REPLACED_BY.tagPriority());
        assertEquals(10, TAG_IS_ANONYMOUS.tagPriority());
        assertEquals(10000, TAG_DOMAIN.tagPriority());
        assertEquals(10000, TAG_RANGE.tagPriority());
        assertEquals(10000, TAG_IS_ANTI_SYMMETRIC.tagPriority());
        assertEquals(10000, TAG_IS_CYCLIC.tagPriority());
        assertEquals(10000, TAG_IS_REFLEXIVE.tagPriority());
        assertEquals(10000, TAG_IS_SYMMETRIC.tagPriority());
        assertEquals(10000, TAG_IS_TRANSITIVE.tagPriority());
        assertEquals(10000, TAG_IS_FUNCTIONAL.tagPriority());
        assertEquals(10000, TAG_IS_INVERSE_FUNCTIONAL.tagPriority());
        assertEquals(10000, TAG_TRANSITIVE_OVER.tagPriority());
        assertEquals(60, TAG_HOLDS_OVER_CHAIN.tagPriority());
        assertEquals(10000, TAG_EQUIVALENT_TO_CHAIN.tagPriority());
        assertEquals(10000, TAG_DISJOINT_OVER.tagPriority());
        assertEquals(10000, TAG_EXPAND_ASSERTION_TO.tagPriority());
        assertEquals(10000, TAG_EXPAND_EXPRESSION_TO.tagPriority());
        assertEquals(10000, TAG_IS_CLASS_LEVEL_TAG.tagPriority());
        assertEquals(10000, TAG_IS_METADATA_TAG.tagPriority());
        assertEquals(120, TAG_CONSIDER.tagPriority());
        assertEquals(10000, TAG_INVERSE_OF.tagPriority());
        assertEquals(10000, TAG_IS_ASYMMETRIC.tagPriority());
        assertEquals(10000, TAG_NAMESPACE_ID_RULE.tagPriority());
        assertEquals(10000, TAG_LOGICAL_DEFINITION_VIEW_RELATION.tagPriority());
        assertEquals(10000, TAG_SCOPE.tagPriority());
        assertEquals(10000, TAG_HAS_SYNONYM_TYPE.tagPriority());
        assertEquals(10000, TAG_BROAD.tagPriority());
        assertEquals(10000, TAG_NARROW.tagPriority());
        assertEquals(10000, TAG_EXACT.tagPriority());
        assertEquals(10000, TAG_RELATED.tagPriority());
        assertEquals(10000, TAG_FORMAT_VERSION.typeDefPriority());
        assertEquals(10000, TAG_ONTOLOGY.typeDefPriority());
        assertEquals(10000, TAG_DATA_VERSION.typeDefPriority());
        assertEquals(10000, TAG_DATE.typeDefPriority());
        assertEquals(10000, TAG_SAVED_BY.typeDefPriority());
        assertEquals(10000, TAG_AUTO_GENERATED_BY.typeDefPriority());
        assertEquals(10000, TAG_IMPORT.typeDefPriority());
        assertEquals(10000, TAG_SUBSETDEF.typeDefPriority());
        assertEquals(10000, TAG_SYNONYMTYPEDEF.typeDefPriority());
        assertEquals(10000, TAG_DEFAULT_NAMESPACE.typeDefPriority());
        assertEquals(10000, TAG_IDSPACE.typeDefPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_EQUIVALENT.typeDefPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_REVERSE_GENUS_DIFFERENTIA.typeDefPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_GENUS_DIFFERENTIA.typeDefPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_RELATIONSHIP.typeDefPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_IS_A.typeDefPriority());
        assertEquals(10000, TAG_TREAT_XREFS_AS_HAS_SUBCLASS.typeDefPriority());
        assertEquals(10000, TAG_OWL_AXIOMS.typeDefPriority());
        assertEquals(10000, TAG_REMARK.typeDefPriority());
        assertEquals(5, TAG_ID.typeDefPriority());
        assertEquals(15, TAG_NAME.typeDefPriority());
        assertEquals(20, TAG_NAMESPACE.typeDefPriority());
        assertEquals(25, TAG_ALT_ID.typeDefPriority());
        assertEquals(30, TAG_DEF.typeDefPriority());
        assertEquals(35, TAG_COMMENT.typeDefPriority());
        assertEquals(40, TAG_SUBSET.typeDefPriority());
        assertEquals(45, TAG_SYNONYM.typeDefPriority());
        assertEquals(50, TAG_XREF.typeDefPriority());
        assertEquals(70, TAG_BUILTIN.typeDefPriority());
        assertEquals(55, TAG_PROPERTY_VALUE.typeDefPriority());
        assertEquals(115, TAG_IS_A.typeDefPriority());
        assertEquals(120, TAG_INTERSECTION_OF.typeDefPriority());
        assertEquals(125, TAG_UNION_OF.typeDefPriority());
        assertEquals(130, TAG_EQUIVALENT_TO.typeDefPriority());
        assertEquals(135, TAG_DISJOINT_FROM.typeDefPriority());
        assertEquals(165, TAG_RELATIONSHIP.typeDefPriority());
        assertEquals(191, TAG_CREATED_BY.typeDefPriority());
        assertEquals(192, TAG_CREATION_DATE.typeDefPriority());
        assertEquals(169, TAG_IS_OBSOLETE.typeDefPriority());
        assertEquals(185, TAG_REPLACED_BY.typeDefPriority());
        assertEquals(10, TAG_IS_ANONYMOUS.typeDefPriority());
        assertEquals(60, TAG_DOMAIN.typeDefPriority());
        assertEquals(65, TAG_RANGE.typeDefPriority());
        assertEquals(75, TAG_IS_ANTI_SYMMETRIC.typeDefPriority());
        assertEquals(80, TAG_IS_CYCLIC.typeDefPriority());
        assertEquals(85, TAG_IS_REFLEXIVE.typeDefPriority());
        assertEquals(90, TAG_IS_SYMMETRIC.typeDefPriority());
        assertEquals(100, TAG_IS_TRANSITIVE.typeDefPriority());
        assertEquals(105, TAG_IS_FUNCTIONAL.typeDefPriority());
        assertEquals(110, TAG_IS_INVERSE_FUNCTIONAL.typeDefPriority());
        assertEquals(145, TAG_TRANSITIVE_OVER.typeDefPriority());
        assertEquals(71, TAG_HOLDS_OVER_CHAIN.typeDefPriority());
        assertEquals(155, TAG_EQUIVALENT_TO_CHAIN.typeDefPriority());
        assertEquals(160, TAG_DISJOINT_OVER.typeDefPriority());
        assertEquals(195, TAG_EXPAND_ASSERTION_TO.typeDefPriority());
        assertEquals(200, TAG_EXPAND_EXPRESSION_TO.typeDefPriority());
        assertEquals(210, TAG_IS_CLASS_LEVEL_TAG.typeDefPriority());
        assertEquals(205, TAG_IS_METADATA_TAG.typeDefPriority());
        assertEquals(190, TAG_CONSIDER.typeDefPriority());
        assertEquals(140, TAG_INVERSE_OF.typeDefPriority());
        assertEquals(10000, TAG_IS_ASYMMETRIC.typeDefPriority());
        assertEquals(10000, TAG_NAMESPACE_ID_RULE.typeDefPriority());
        assertEquals(10000, TAG_LOGICAL_DEFINITION_VIEW_RELATION.typeDefPriority());
        assertEquals(10000, TAG_SCOPE.typeDefPriority());
        assertEquals(10000, TAG_HAS_SYNONYM_TYPE.typeDefPriority());
        assertEquals(10000, TAG_BROAD.typeDefPriority());
        assertEquals(10000, TAG_NARROW.typeDefPriority());
        assertEquals(10000, TAG_EXACT.typeDefPriority());
        assertEquals(10000, TAG_RELATED.typeDefPriority());

    }
}
